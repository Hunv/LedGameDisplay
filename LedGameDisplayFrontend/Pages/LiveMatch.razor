@page "/livematch"
@using LedGameDisplayFrontend.Data
@using LedGameDisplayFrontend.Data.JsonModel
@using System.Net.Http
@using System.Web
@using System.Text.Json
@inject NavigationManager NavigationManager

<h1>Live Match</h1>

@if (loading == true)
{
    <p><em>Loading...</em></p>
}
else if (liveMatch == null)
{
    <p><em>No match is ongoing</em></p>
}
else
{
    <h2>Team1 - @liveMatch.Team1.Name</h2>
    <br />
    <h2>@liveMatch.ScoreTeam1</h2>
    <br />
    <br />
    <h2>Team2 - @liveMatch.Team2.Name</h2>
    <br />
    <h2>@liveMatch.ScoreTeam2</h2>
    <br />
    <br />
    <h2>Timeleft</h2>
    <br />
    <h2>@liveMatch.CurrentTimeLeft</h2>
    <br />
    <br />
    <h2>Halftime (of @liveMatch.HalfTimeAmount)</h2>
    <br />
    <h2>@liveMatch.CurrentHalfTime</h2>


    <button class="btn btn-primary" @onclick="UnpauseGame">Zeit starten</button>
    <button class="btn btn-primary" @onclick="PauseGame">Zeit stoppen</button>
    <br />
    <br />
    <br />
    <button class="btn btn-primary" @onclick="GoalTeam1">Tor Team1</button>
    <button class="btn btn-primary" @onclick="GoalTeam2">Tor Team2</button>
    <br />
    <br />
    <br />
    <button class="btn btn-primary" @onclick="StartGame">Spiel starten</button>
    <button class="btn btn-primary" @onclick="EndGame">Spiel beenden</button>
}

@code {
    private bool loading = true;
    private Match liveMatch = null;
    private Team[] teamList = null;
    private System.Timers.Timer tmrMatchtime = new System.Timers.Timer(1000);

    protected override async Task OnInitializedAsync()
    {
        liveMatch = await PanelApiService.GetLiveMatchAsync();
        tmrMatchtime.Elapsed += OnTmrMatchtimeElapsed;

        //Currently a livematch ongoing
        if (liveMatch != null)
        {
            tmrMatchtime.Start();
        }

        loading = false;
    }

    private async void OnTmrMatchtimeElapsed(Object source, System.Timers.ElapsedEventArgs e)
    {
        liveMatch = await PanelApiService.GetLiveMatchAsync();

        await InvokeAsync(() => { StateHasChanged(); });
    }

    private async void StartGame()
    {
        await PanelApiService.UpdateLiveMatchAsync("start");
    }

    private async void PauseGame()
    {
        await PanelApiService.UpdateLiveMatchAsync("pause");
    }
    
    private async void UnpauseGame()
    {
        await PanelApiService.UpdateLiveMatchAsync("unpause");
    }

    private async void GoalTeam1()
    {
        await PanelApiService.UpdateLiveMatchAsync("goal1");
    }

    private async void GoalTeam2()
    {
        await PanelApiService.UpdateLiveMatchAsync("goal2");
    }

    private async void EndGame()
    {
        await PanelApiService.UpdateLiveMatchAsync("finish");
    }
}


